<?php
/**
 * @file
 * Provides custom HTML class settings for field formatters.
 */

use Drupal\Component\Utility\Html;
use Drupal\Component\Utility\Xss;
use Drupal\Core\Entity\Entity\EntityViewDisplay;
use Drupal\block_content\BlockContentInterface;

/**
 * Add a textfield class to Block form
 *  Implements hook_form_FORM_ID_alter().
 */
function com_animation_form_block_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
	$block_id = $form['id']['#default_value'];
 	$block = \Drupal::entityManager()->getStorage('block')->load($block_id);

  	if ($block) {			
	  	
	  	$plugin_id = $block->getPluginId();
	  	$config_factory = \Drupal::configFactory();
	 	$plugin_definition = $block->getPlugin()->getPluginDefinition();
	  	$animation_config = $config_factory->getEditable('com_animation.settings.animate');	

		$form['animate'] = [
			'#type' => 'select',
			'#options' => com_animation_get_animatable_classes(),
			'#weight' => 0,
			'#title' => t('Animate'),
			'#default_value' => $animation_config->get($plugin_id.$block_id),
			'#description' => t('Choose an animation to be applied to this block.')
		];

		
		if ($plugin_definition['provider'] === 'views') {
	
			$carousel_config = $config_factory->getEditable('com_animation.settings.carousel');			
			$carousel_toshow_config = $config_factory->getEditable('com_animation.settings.carousel_toshow');			
			
			$form['carousel'] = [
				'#type' => 'checkbox',
				'#weight' => 0,
				'#title' => t('Carousel'),
				'#default_value' => $carousel_config->get($plugin_id.$block_id),
				'#description' => t('Chose whether this block should be carousel scrollable. This should only be used on views outputting more than one item.')
			];
			
			$form['carousel_toshow'] = [
				'#type' => 'select',
				'#options' => [1 => 1,2 => 2,3 => 3,4 => 4,5 => 5,6 => 6,7 => 7,8 => 8,9 => 9,10 => 10,11 => 11,12 => 12],			
				'#weight' => 0,
				'#title' => t('Items to Show'),
				'#default_value' => $carousel_toshow_config->get($plugin_id.$block_id),
				'#description' => t('How many items should be shown at once?')
			];
			
			$form['#attached']['library'][] = 'com_animation/block_edit_form';	
		}
		
		$form['actions']['submit']['#submit'][] = 'com_animation_block_save_callback';
	}
}



function com_animation_form_layout_builder_update_block_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
	$component = $form_state->getFormObject()->getCurrentComponent();
	$component_array = (array) $component;
  	$config_factory = \Drupal::configFactory();		
  	$animation_config = $config_factory->getEditable('com_animation.settings.animate');	
  	$plugin_id = $component->getPluginId();
  	$is_views = strpos(substr($plugin_id, 0, strpos($plugin_id, ':')), 'views') > -1;
  	$unique = $component->getUuid();

  	if (!isset($component_array["\0*\0configuration"]['formatter']['third_party_settings']['com_animation']['animate'])) {
	  	$form['animate'] = [
			'#type' => 'select',
			'#options' => com_animation_get_animatable_classes(),
			'#weight' => -1,
			'#title' => t('Animate'),
			'#default_value' => $animation_config->get($plugin_id.$unique),
			'#description' => t('Choose an animation to be applied to this block.')
		];

	
		if ($is_views) {
			$carousel_config = $config_factory->getEditable('com_animation.settings.carousel');			
			$carousel_toshow_config = $config_factory->getEditable('com_animation.settings.carousel_toshow');			
				
			$form['carousel'] = [
				'#type' => 'checkbox',
				'#weight' => 0,
				'#title' => t('Carousel'),
				'#default_value' => $carousel_config->get($plugin_id.$unique),
				'#description' => t('Choose whether this block should be carousel scrollable. This should only be used on views outputting more than one item.')
			];
			
			$form['carousel_toshow'] = [
				'#type' => 'select',
				'#options' => [1 => 1,2 => 2,3 => 3,4 => 4,5 => 5,6 => 6,7 => 7,8 => 8,9 => 9,10 => 10,11 => 11,12 => 12],			
				'#weight' => 0,
				'#title' => t('Items to Show'),
				'#default_value' => $carousel_toshow_config->get($plugin_id.$unique),
				'#description' => t('How many items should be shown at once?')
			];
			
			$form['#attached']['library'][] = 'com_animation/block_edit_form';
		}	
		
		$form['actions']['submit']['#submit'][] = 'com_animation_layout_block_save_callback';	
	}
}

/**
 * Callback to Form block  - Adding classes.
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function com_animation_block_save_callback(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
	//Get the current block id.
	$block_id = $form_state->getValue('id');
	$block = \Drupal::entityManager()->getStorage('block')->load($block_id);
	$unique = $block->id();
	
	if ($block) {
		$plugin_id = \Drupal::entityManager()->getStorage('block')->load($block_id)->getPluginId();
	
		//Get all configurations.
		$config_factory = \Drupal::configFactory();
	
		if ($plugin_id != '') {
			if ($form_state->hasValue('animate')) {
		    	$config_factory->getEditable('com_animation.settings.animate')->set($plugin_id.$unique, $form_state->getValue('animate'))->save(TRUE);
		    }
		    
		    if ($form_state->hasValue('carousel')) {
		    	$config_factory->getEditable('com_animation.settings.carousel')->set($plugin_id.$unique, $form_state->getValue('carousel'))->save(TRUE);
			}
			
		    if ($form_state->hasValue('carousel_toshow')) {
		    	$config_factory->getEditable('com_animation.settings.carousel_toshow')->set($plugin_id.$unique, $form_state->getValue('carousel_toshow'))->save(TRUE);
			}			
		}
	}
}

/**
 * Callback to Form block  - Adding classes.
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function com_animation_layout_block_save_callback(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
	//Get all configurations.
	$config_factory = \Drupal::configFactory();
	$component = $form_state->getFormObject()->getCurrentComponent();
	$plugin_id = $component->getPluginId();
  	$unique = $component->getUuid();

	if ($plugin_id != '') {
		if ($form_state->hasValue('animate')) {
	    	$config_factory->getEditable('com_animation.settings.animate')->set($plugin_id.$unique, $form_state->getValue('animate'))->save(TRUE);
	    }
		    
	    if ($form_state->hasValue('carousel')) {
	    	$config_factory->getEditable('com_animation.settings.carousel')->set($plugin_id.$unique, $form_state->getValue('carousel'))->save(TRUE);
		}
			
	    if ($form_state->hasValue('carousel_toshow')) {
	    	$config_factory->getEditable('com_animation.settings.carousel_toshow')->set($plugin_id.$unique, $form_state->getValue('carousel_toshow'))->save(TRUE);
		}			
	}
}


/**
 *  Implements hook_preprocess_block().
 */
function com_animation_preprocess_block(&$variables) {
	$config_factory = \Drupal::configFactory();
	$plugins_id = $variables['elements']['#configuration']['id'];
	$animation_class = $config_factory->getEditable('com_animation.settings.animate')->get($plugins_id);
	$carousel = $config_factory->getEditable('com_animation.settings.carousel')->get($plugins_id);
	
	$classes = [];
	
	if ($animation_class && $variables['configuration']['id'] == $plugins_id) {
		$classes[] = 'animatable';
		$classes[] = $animation_class;
	}

	if ($carousel == 1 && $variables['configuration']['id'] == $plugins_id) {
		//print 'ron'.$carousel.'ron';
		//$classes[] = 'content-carousel';
		//$carousel_toshow = $config_factory->getEditable('com_animation.settings.carousel_toshow')->get($plugins_id);
		//$variables['attributes']['data-carousel-toshow'] = $carousel_toshow;
  	}
  	
  	if (count($classes)) {
		if (!isset($variables['attributes']['class'])) {
			$variables['attributes']['class'] = [];
		}
		
		foreach($classes as $klass) {
			$variables['attributes']['class'][] = $klass;
		}
	}
}


/**
 * Implements hook_field_formatter_settings_summary_alter().
 */
function com_animation_field_formatter_settings_summary_alter(&$summary, $context) {
  $setting = $context['formatter']->getThirdPartySetting('com_animation', 'animate');
  if (!empty($setting)) {
    $summary[] = t('Class: @class', array('@class' => Xss::filter($setting, array())));
  }
}

/**
 * Implements hook_field_formatter_third_party_settings_form().
 *
 * Adds a 'class' textfield to all formatters.
 */
function com_animation_field_formatter_third_party_settings_form(\Drupal\Core\Field\FormatterInterface $plugin, \Drupal\Core\Field\FieldDefinitionInterface $field_definition, $view_mode, $form, \Drupal\Core\Form\FormStateInterface $form_state) {	
	$element['animate'] = [
		'#type' => 'select',
		'#options' => com_animation_get_animatable_classes(),
		'#title' => t('Animate'),
		'#default_value' => $plugin->getThirdPartySetting('com_animation', 'animate'),
		'#description' => t('Choose an animation to be applied to this field.')
	];

	return $element;
}

/*function com_animation_preprocess_field(&$variables) {
	$element = $variables['element'];
	$entity = $element['#object'];
	$field_name = $element['#field_name'];
	$view_mode = $element['#view_mode'];

	// START: add animatable classes to layout builder fields
	$render_display = EntityViewDisplay::collectRenderDisplay($entity, $view_mode);	
	//$field_display = $render_display->getComponent($field_name);

	if (!$entity->isNew()) {
		if (isset($field_display['third_party_settings']['com_animation']) && $field_display['third_party_settings']['com_animation']['animate'] !== '') {
			$variables['attributes']['class'][] = 'animatable';
			$variables['attributes']['class'][] = Html::escape($field_display['third_party_settings']['com_animation']['animate']);
		}
	}
}*/


// use for generating animation dropdown options
function com_animation_get_animatable_classes() {
	return [
		"" => "None",
		"Attention Seekers" => [
			"bounce" => "bounce",
			"flash" => "flash",
			"pulse" => "pulse",
			"rubberBand" => "rubberBand",
			"shake" => "shake",
			"swing" => "swing",
			"tada" => "tada",
			"wobble" => "wobble",
			"jello" => "jello",
			"heartBeat" => "heartBeat",
		],
		"Bouncing Entrances" => [
			"bounceIn" => "bounceIn",
			"bounceInDown" => "bounceInDown",
			"bounceInLeft" => "bounceInLeft",
			"bounceInRight" => "bounceInRight",
			"bounceInUp" => "bounceInUp",
		],
		"Bouncing Exits" => [
			"bounceOut" => "bounceOut",
			"bounceOutDown" => "bounceOutDown",
			"bounceOutLeft" => "bounceOutLeft",
			"bounceOutRight" => "bounceOutRight",
			"bounceOutUp" => "bounceOutUp",
		],
		"Fading Entrances" => [
			"fadeIn" => "fadeIn",
			"fadeInDown" => "fadeInDown",
			"fadeInDownBig" => "fadeInDownBig",
			"fadeInLeft" => "fadeInLeft",
			"fadeInLeftBig" => "fadeInLeftBig",
			"fadeInRight" => "fadeInRight",
			"fadeInRightBig" => "fadeInRightBig",
			"fadeInUp" => "fadeInUp",
			"fadeInUpBig" => "fadeInUpBig",
		],
		"Fading Exits" => [
			"fadeOut" => "fadeOut",
			"fadeOutDown" => "fadeOutDown",
			"fadeOutDownBig" => "fadeOutDownBig",
			"fadeOutLeft" => "fadeOutLeft",
			"fadeOutLeftBig" => "fadeOutLeftBig",
			"fadeOutRight" => "fadeOutRight",
			"fadeOutRightBig" => "fadeOutRightBig",
			"fadeOutUp" => "fadeOutUp",
			"fadeOutUpBig" => "fadeOutUpBig",
		],
		"Flippers" => [
			"flip" => "flip",
			"flipInX" => "flipInX",
			"flipInY" => "flipInY",
			"flipOutX" => "flipOutX",
			"flipOutY" => "flipOutY",
		],
		"Lightspeed" => [
			"lightSpeedIn" => "lightSpeedIn",
			"lightSpeedOut" => "lightSpeedOut",
		],
		"Rotating Entrances" => [
			"rotateIn" => "rotateIn",
			"rotateInDownLeft" => "rotateInDownLeft",
			"rotateInDownRight" => "rotateInDownRight",
			"rotateInUpLeft" => "rotateInUpLeft",
			"rotateInUpRight" => "rotateInUpRight",
		],
		"Rotating Exits" => [
			"rotateOut" => "rotateOut",
			"rotateOutDownLeft" => "rotateOutDownLeft",
			"rotateOutDownRight" => "rotateOutDownRight",
			"rotateOutUpLeft" => "rotateOutUpLeft",
			"rotateOutUpRight" => "rotateOutUpRight",
		],
		"Sliding Entrances" => [
			"slideInUp" => "slideInUp",
			"slideInDown" => "slideInDown",
			"slideInLeft" => "slideInLeft",
			"slideInRight" => "slideInRight",

		],
		"Sliding Exits" => [
			"slideOutUp" => "slideOutUp",
			"slideOutDown" => "slideOutDown",
			"slideOutLeft" => "slideOutLeft",
			"slideOutRight" => "slideOutRight",

		],
		"Zoom Entrances" => [
			"zoomIn" => "zoomIn",
			"zoomInDown" => "zoomInDown",
			"zoomInLeft" => "zoomInLeft",
			"zoomInRight" => "zoomInRight",
			"zoomInUp" => "zoomInUp",
		],
		"Zoom Exits" => [
			"zoomOut" => "zoomOut",
			"zoomOutDown" => "zoomOutDown",
			"zoomOutLeft" => "zoomOutLeft",
			"zoomOutRight" => "zoomOutRight",
			"zoomOutUp" => "zoomOutUp",
		],
		"Specials" => [
			"hinge" => "hinge",
			"jackInTheBox" => "jackInTheBox",
			"rollIn" => "rollIn",
			"rollOut" => "rollOut",
		]
	];
}

// use for generating Zurb Foundation Motion UI animation dropdown options
function com_animation_get_mui_animatable_classes() {
	return [
		"" => "None",
		"Slide" => [
			"slide-in-down" => "slide-in-down",
			"slide-in-left" => "slide-in-left",
			"slide-in-up" => "slide-in-up",
			"slide-in-right" => "slide-in-right",
			"slide-out-down" => "slide-out-down",
			"slide-out-left" => "slide-out-left",
			"slide-out-up" => "slide-out-up",
			"slide-out-right" => "slide-out-right",
		],
		"Fade" => [
			"fade-in" => "fade-in",
			"fade-out" => "fade-out",
		],
		"Hinge" => [
			"hinge-in-from-top" => "hinge-in-from-top",
			"hinge-in-from-right" => "hinge-in-from-right",
			"hinge-in-from-bottom" => "hinge-in-from-bottom",
			"hinge-in-from-left" => "hinge-in-from-left",
			"hinge-in-from-middle-x" => "hinge-in-from-middle-x",
			"hinge-in-from-middle-y" => "hinge-in-from-middle-y",
			"hinge-out-from-top" => "hinge-out-from-top",
			"hinge-out-from-right" => "hinge-out-from-right",
			"hinge-out-from-bottom" => "hinge-out-from-bottom",
			"hinge-out-from-left" => "hinge-out-from-left",
			"hinge-out-from-middle-x" => "hinge-out-from-middle-x",
			"hinge-out-from-middle-y" => "hinge-out-from-middle-y",
		],
		"Scale" => [
			"scale-in-up" => "scale-in-up",
			"scale-in-down" => "scale-in-down",
			"scale-out-up" => "scale-out-up",
			"scale-out-down" => "scale-out-down",
		],
		"Spin" => [
			"spin-in" => "spin-in",
			"spin-out" => "spin-out",
			"spin-in-ccw" => "spin-in-ccw",
			"spin-out-ccw" => "spin-out-ccw",
		],
	];
}
